---

import IconArrow from "../components/IconArrow.astro";

import { dateFormatter } from "../scripts/helpers.js"
import { getCatIconAndLabel } from "../scripts/helpers.js"

import "../styles/cards.css"

const { posts, numToShow, sort, view, featured } = Astro.props;

const allPosts = await Astro.glob('../pages/*/*/*.md');

posts.map((post) => {
    if (post.frontmatter.category === 'Collections' || post.frontmatter.category === undefined){

        // Filter articles
        let filteredPosts;

        if (post.frontmatter.category === 'Collections') {
            filteredPosts = posts.filter((filterPost) => {
                return filterPost.frontmatter.collections !== undefined && filterPost.frontmatter.collections.includes(post.frontmatter.title)
            })
        } else {
            filteredPosts = allPosts.filter((filterPost) => {
                return filterPost.frontmatter.project === post.frontmatter.title;
            })
        }
        
        // Store the number of articles
        post.frontmatter.numArticles = filteredPosts.length;

        let greatestDate = 0;
        let key;

        // Determine the most recently updated article
        for (let x in filteredPosts){
            let date = Date.parse(filteredPosts[x].frontmatter.date);
            if (date > greatestDate){
                key = x;
                greatestDate = date;
            }
        }

        // If a date is found, store the date
        if (greatestDate > 0){
            post.frontmatter.recentEditDate = greatestDate;
        } else {
            post.frontmatter.recentEditDate = 0;
        }
        
    }
})

// Sort the posts by most recently edited
if (sort === 'byDateDesc'){
    posts.sort((a, b) => {
        let aDate = a.frontmatter.recentEditDate !== undefined ? a.frontmatter.recentEditDate : Date.parse(a.frontmatter.date);
        let bDate = b.frontmatter.recentEditDate !== undefined ? b.frontmatter.recentEditDate : Date.parse(b.frontmatter.date);
        return bDate - aDate;
    });
    
}


---
<div class="card-group">
    <ul>
        {posts.map((post, index) => {
            if (index < numToShow){

                // Get the category icon and singular label
                let icon = getCatIconAndLabel(post.frontmatter.category).icon;
                let label = getCatIconAndLabel(post.frontmatter.category).label;

                let postType
                if (post.frontmatter.category === 'Collections' || post.frontmatter.category === undefined){
                    postType = label;
                } else {
                    postType = 'Article';
                }

                let meta;
                if (postType === 'Article'){
                    meta = `
                        <p class="project">Project: ${post.frontmatter.project}</p>
                        <p class="date">Updated ${dateFormatter.format(Date.parse(post.frontmatter.date))}</p>
                    `;
                } else {
                    let numArticleString = post.frontmatter.numArticles !== undefined ? `<p class="num-articles">${post.frontmatter.numArticles} Articles</p>` : '';
                    let recentDateString = post.frontmatter.recentEditDate !== undefined && post.frontmatter.recentEditDate > 0 ? `<p class="date">Updated ${dateFormatter.format(post.frontmatter.recentEditDate)}</p>` : '';
                    meta = numArticleString + recentDateString;
                }

                return  <li class={view ? `card ${view}` : 'card'}>
                            <div class="info-group">
                                <h3>{post.frontmatter.title}</h3>
                                <p class="category"><Fragment set:html={icon} /><span>{label}</span></p>
                                <p class="description">{post.frontmatter.description}</p>
                                <div class="meta" set:html={meta}></div>
                            </div>
                            <a href={post.url} aria-label="Open Article"><span>Open {postType}</span><IconArrow/></a>    
                        </li>
            
            }
            
        })}
    </ul>
</div>

<!-- <li class="card">
    <div class="info-group">
        <h3>{post.frontmatter.title}</h3>
        <p class="category"><Fragment set:html={icon} />{label}</p>
        <p class="description">{post.frontmatter.description}</p>
        <div class="meta" set:html={meta}></div>
    </div>
    <a href={post.url}>Open {postType} <IconArrow/></a>    
</li>

<li class="article" data-title="Aisiki" data-date="2023-12-18T19:44:20.442Z" data-category="Places" data-item="" data-sublists="[&quot;Planets/Moons&quot;]">

    <a href="/garuda/places/aisiki">
        <span class="icon-group">
            <svg class="icon icon-category" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"></span>
        <span class="title">Aisiki</span>
        <span class="date">Dec 18, 2023, 3:44 PM</span>    
    </a>

    <button class="bookmark-toggle" data-title="Aisiki" data-url="/garuda/places/aisiki" data-project="Garuda">
        <svg class="icon icon-category" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"></svg>
    </button>

</li> -->