---
import IconArrow from "../components/IconArrow.astro";
import IconBookmarks from "../components/IconBookmarks.astro";
import BaseLayout from "./BaseLayout.astro";
import SidePanel from "../components/SidePanel.astro";
import CardGroup from "../components/CardGroup.astro";
import Timeline from "../components/Timeline.astro";

import { toTitleCase } from '../scripts/helpers.js';
import { detectType } from '../scripts/helpers.js';
import { dateFormatter } from '../scripts/helpers.js';
import { getCatIconAndLabel } from '../scripts/helpers.js';
import { processEventsForTimeline } from '../scripts/helpers.js';

import { marked } from 'marked';

import "../styles/post.css";

const { frontmatter } = Astro.props;

// Determine active project and post
const pagePath = frontmatter.url.split('/');
const activeProject = frontmatter.project;
const activePost = frontmatter.url;

// Get active post content
const postContent = await Astro.props.compiledContent();
const postContentRaw = await Astro.props.rawContent();

console.log(frontmatter);
console.log(postContent);
console.log(postContentRaw);

// Get project posts
const posts = await Astro.glob('../pages/*/*/*.md');
const projectPosts = posts.filter(post => {
    return  post.frontmatter.project === activeProject 
            && post.url !== activePost;
})

// Collect all search terms in an array
let searchArr = [];
for (const obj of projectPosts) {
    if (obj.frontmatter.searchTerms) {
        for (const term of obj.frontmatter.searchTerms) {
            searchArr.push({
                term: term,
                post: obj,
                title: obj.frontmatter.title,
                description: obj.frontmatter.description,
                url: obj.url
            })
        }
    }
}

// Sort terms from longest to shortest
searchArr.sort((a, b) => b.term.length - a.term.length);

/**
 * Search string for matching search terms
 * @param  {String} string a string to be searched
 * @param  {Array} terms an array of object search terms
 * @param  {Object} relevance (optional) an object of relevance score
 * @return {Object} an object including the edited string and updated relevance score object
 */
let detectMatches = function(string, terms, relevance){
    let editedString = string;
    let editedRelevance;
    if (relevance){
        editedRelevance = relevance;
    } else {
        editedRelevance = [];
    }
    
    for (const obj of terms){
        let post = {...obj.post};
        let term = obj.term;
        // Replace quote marks with regex that captures all types
        term = term.replaceAll("'", "['’]");
        term = term.replaceAll('"', '[“”"]');
        let pattern = `(?<!<a[^>]*)(?<!<[^>]*)(${term})(?![^<]*<\/a>)`;
        let flags = 'gi'; // g for global and i for case-insensitive
        let regex = new RegExp(pattern, flags);
        // Detect matches and add to relevance score
        let matches = editedString.match(regex);
        if (matches && matches.length > 0){
            let relIndex = editedRelevance.findIndex(x => x.url === obj.url);
            if (relIndex !== -1){
                editedRelevance[relIndex].score += matches.length;
            } else {
                post.score = matches.length;
                editedRelevance.push(post);
            }
        }
        // Wrap matches in links
        editedString = editedString.replaceAll(regex, 
        `${obj.description ? `
            <span class="link-group">
                <a href="${obj.url}">$&</a>
                <span class="page-preview">
                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <circle vector-effect="non-scaling-stroke" cx="12" cy="12" r="11"/>
                        <path d="M9.39 16.02c0-.35.07-.69.17-1.08l.89-3.59H7.5l.4-1.92h5.4l-1.32 5.63c-.04.16-.07.32-.07.47 0 .74.44 1.04 1.07 1.04.44 0 .84-.13 1.4-.36l.51 1.85c-.78.33-1.57.52-2.67.52-1.72 0-2.84-.96-2.84-2.56ZM10.7 6.6c0-.91.8-1.71 1.8-1.71.92 0 1.58.49 1.58 1.4 0 .98-.81 1.71-1.82 1.71-.81 0-1.56-.46-1.56-1.4Z"/>
                    </svg>
                    <span>${obj.description}</span>
                </span>
            </span>` 
            
        : `<a href="${obj.url}">$&</a>`}`
        
        );
    }

    return {
        string: editedString,
        relevance: editedRelevance 
    }
}

let editedPostContent = detectMatches(postContent, searchArr, null);

// /**
//  * Construct an html string from a data object
//  * @param  {Object} obj a data object
//  * @param  {String} startStr an html string to place at the start
//  * @param  {String} endStr an html string to place at the end
//  * @return {String} an html string
//  */
//  let constructHTMLFromObject = function(obj, startStr, endStr){
//     let htmlStr = '';
//     if (startStr){
//         htmlStr += startStr;
//     }
//     htmlStr += Object.keys(obj).map((key) => {
//         let valueStr;
//         let value = obj[key];
//         let valueType = detectType(value);

//         if (valueType === 'string'){
//             valueStr = `<p>${value}</p>`

//         } else if (valueType === 'array'){
//             let arrHtmlStr;
//             arrHtmlStr = value.map((arrValue) => {
//                 let arrValueType = detectType(arrValue);

//                 if (arrValueType === 'string'){
//                     return `<li>${arrValue}</li>`;

//                 } else if (arrValueType === 'object'){
//                     let objHtmlStr = Object.values(arrValue).map((objValue) => {
//                         return objValue;
//                     }).join(': '); 
//                     return `<li>${objHtmlStr}</li>`;
//                 }
//             }).join('');
//             valueStr = `<ul>${arrHtmlStr}</ul>`;
//         } else if (valueType === 'object'){
//             let objHtmlStr = Object.values(value).map((objValue) => {
//                 return objValue;
//             }).join(' ');
//             valueStr = `<p>${objHtmlStr}</p>`
//         }

//         return `<div><h3>${toTitleCase(key)}</h3>${valueStr}</div>`;
//     }).join('');
//     if (endStr){
//         htmlStr += endStr;
//     }
//     return htmlStr;
//  }

// // Generate HTML for the details
// let postDetails = '';
// if (frontmatter.details){
//     postDetails = constructHTMLFromObject(frontmatter.details, '<div><h2>Details</h2><div>', '</div></div>' );
// }

// let postConnections = '';
// if (frontmatter.connections){
//     postConnections = constructHTMLFromObject(frontmatter.connections, '<div><h2>Connections</h2><div>', '</div></div>' );
// }

// if (postConnections !== ''){
//     postDetails += postConnections;
// }

let postDetails = marked.parse(frontmatter.details);
let editedPostDetails;
let relevanceArr;
if (postDetails !== ''){
    editedPostDetails = detectMatches(postDetails, searchArr, editedPostContent.relevance);
    relevanceArr = editedPostDetails.relevance.sort((a, b) => b.score - a.score);
} else {
    relevanceArr = editedPostContent.relevance;
}

let timelineEvents = processEventsForTimeline(frontmatter);

---

<BaseLayout pageTitle={frontmatter.title} activeProject={activeProject}>
    <main class="post">
        <SidePanel activeProject={activeProject} activePost={frontmatter} />
        <article>
            <section class="header">
                <div class="breadcrumbs">
                    {pagePath.map((step, index) => {
                        if (index == 0){
                            return ''
                        } else if (index == 1){
                            return <a href={`/../../${step}`}>{toTitleCase(step)}</a><IconArrow />
                        } else if (index == 2){
                            return <a href={`/../../${pagePath[1]}?filter=${step}`}>{toTitleCase(step)}</a><IconArrow />
                        } else {
                            return <a href={`/${step}`}>{frontmatter.title}</a>
                        }
                    })}
                </div>
                <h1>{frontmatter.title}</h1>
                <div class="meta">
                    <p class="category"><Fragment set:html={getCatIconAndLabel(frontmatter.category).icon} />{getCatIconAndLabel(frontmatter.category).label}</p>
                    <p class="date">Published {dateFormatter.format(Date.parse(frontmatter.date))}</p>
                </div>
                <button class="bookmark-toggle" data-title={frontmatter.title} data-url={frontmatter.url} data-project={frontmatter.project}><IconBookmarks /></button>
            </section>
            <section class="content" set:html={editedPostContent.string}></section>
            {
                editedPostDetails && (
                    <section class="details" set:html={editedPostDetails.string}></section>
                )
            }
            {
                timelineEvents !== undefined && timelineEvents.length > 1 && (
                    <section class="timeline">
                        <h2>Timeline</h2>
                        <Timeline events={timelineEvents} />
                    </section>
                )
            }
            {
                relevanceArr !== undefined && relevanceArr.length > 0 && (
                    <section class="related">
                        <h2>Related Articles</h2>
                        <CardGroup posts={relevanceArr} numToShow={3} />
                    </section>
                )
            }
            
        </article>
        
    </main>
</BaseLayout>

<script src="/scripts/bookmarks.js" is:inline></script>
