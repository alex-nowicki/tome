---
import IconArrow from "../components/IconArrow.astro";
import IconBookmarks from "../components/IconBookmarks.astro";
import IconCollections from "../components/IconCollections.astro";
import BaseLayout from "./BaseLayout.astro";
import SidePanel from "../components/SidePanel.astro";
import CardGroup from "../components/CardGroup.astro";
import Timeline from "../components/Timeline.astro";

import { toTitleCase } from '../scripts/helpers.js';
import { detectType } from '../scripts/helpers.js';
import { dateFormatter } from '../scripts/helpers.js';
import { getCatIconAndLabel } from '../scripts/helpers.js';
import { processEventsForTimeline } from '../scripts/helpers.js';

import { marked } from 'marked';

import "../styles/post.css";

const { frontmatter } = Astro.props;

// Determine active project and post
const pagePath = frontmatter.url.split('/');
const activeProject = frontmatter.project;
const activePost = frontmatter.url;

// Get active post content
const postHTML = await Astro.props.compiledContent();

// Get project posts
const posts = await Astro.glob('../pages/*/*/*.md');
const projectPosts = posts.filter(post => {
    return  post.frontmatter.project === activeProject 
            && post.url !== activePost;
})

// Get collections
const collections = posts.filter(post => {
    return post.frontmatter.category === 'Collections';
})

// Collect all search terms in an array
let searchArr = [];
for (const obj of projectPosts) {
    if (obj.frontmatter.searchTerms) {
        for (const term of obj.frontmatter.searchTerms) {
            searchArr.push({
                term: term,
                post: obj,
                title: obj.frontmatter.title,
                description: obj.frontmatter.description,
                url: obj.url
            })
        }
    }
}

// Sort terms from longest to shortest
searchArr.sort((a, b) => b.term.length - a.term.length);

/**
 * Search string for matching search terms
 * @param  {String} string a string to be searched
 * @param  {Array} terms an array of object search terms
 * @param  {Object} relevance (optional) an object of relevance score
 * @return {Object} an object including the edited string and updated relevance score object
 */
let detectMatches = function(string, terms, relevance){
    let editedString = string;
    let editedRelevance;
    if (relevance){
        editedRelevance = relevance;
    } else {
        editedRelevance = [];
    }
    
    for (const obj of terms){
        let post = {...obj.post};
        let term = obj.term;
        // Replace quote marks with regex that captures all types
        term = term.replaceAll("'", "['’]");
        term = term.replaceAll('"', '[“”"]');
        let pattern = `(?<!<a[^>]*)(?<!<[^>]*)(${term})(?![^<]*<\/a>)`;
        let flags = 'gi'; // g for global and i for case-insensitive
        let regex = new RegExp(pattern, flags);
        // Detect matches and add to relevance score
        let matches = editedString.match(regex);
        if (matches && matches.length > 0){
            let relIndex = editedRelevance.findIndex(x => x.url === obj.url);
            if (relIndex !== -1){
                editedRelevance[relIndex].score += matches.length;
            } else {
                post.score = matches.length;
                editedRelevance.push(post);
            }
        }
        // Wrap matches in links
        let replaceString = obj.description ? 
            `
            <span class="link-group">
                <a href="${obj.url}">$&</a>
                <span class="page-preview">
                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <circle vector-effect="non-scaling-stroke" cx="12" cy="12" r="11"/>
                        <path d="M9.39 16.02c0-.35.07-.69.17-1.08l.89-3.59H7.5l.4-1.92h5.4l-1.32 5.63c-.04.16-.07.32-.07.47 0 .74.44 1.04 1.07 1.04.44 0 .84-.13 1.4-.36l.51 1.85c-.78.33-1.57.52-2.67.52-1.72 0-2.84-.96-2.84-2.56ZM10.7 6.6c0-.91.8-1.71 1.8-1.71.92 0 1.58.49 1.58 1.4 0 .98-.81 1.71-1.82 1.71-.81 0-1.56-.46-1.56-1.4Z"/>
                    </svg>
                    <span>${obj.description}</span>
                </span>
            </span>
            ` 

        : `<a href="${obj.url}">$&</a>`;
        editedString = editedString.replaceAll(regex, replaceString);
    }

    return {
        string: editedString,
        relevance: editedRelevance 
    }
}

// Process HTML to add Wiki crosslinks and relevance
let editedPostHTML = detectMatches(postHTML, searchArr, null);

// Split post content into two sections
const editedPostHTMLSections = editedPostHTML.string.split('<hr>\n<hr>\n');

let detailsHTMLSection;
let bodyHTMLSection;

// If HTML was split in two, assign the first section to details, the second to body
if (editedPostHTMLSections.length > 1){
    detailsHTMLSection = editedPostHTMLSections[0];
    bodyHTMLSection = editedPostHTMLSections[1];

// Otherwise, the first and only to body
} else {
    bodyHTMLSection = editedPostHTMLSections[0];
}

// Generate timeline HTML
let timelineEvents = processEventsForTimeline(frontmatter);

// If the post has a lifespan defined

let postsWithLifespan = frontmatter.lifespan ? [Astro.props] : null;

---

<BaseLayout pageTitle={frontmatter.title} activeProject={activeProject}>
    <main class="post">
        <SidePanel activeProject={activeProject} activePost={frontmatter} />
        <article>
            <section class="header">
                <div class="breadcrumbs">
                    {pagePath.map((step, index) => {
                        if (index == 0){
                            return ''
                        } else if (index == 1){
                            return <a href={`/../../${step}`}>{toTitleCase(step)}</a><IconArrow />
                        } else if (index == 2){
                            return <a href={`/../../${pagePath[1]}?filter=${step}`}>{toTitleCase(step)}</a><IconArrow />
                        } else {
                            return <a href={`/${step}`}>{frontmatter.title}</a>
                        }
                    })}
                </div>
                <h1>{frontmatter.title}</h1>
                <ul class="collections">
                    {frontmatter.collections !== undefined && (
                        frontmatter.collections.map((collection) => {
                            let collectionPost = collections.filter(post => {
                                return post.frontmatter.title === collection;
                            })[0];
                            if (collectionPost) {
                                return (
                                    <li><a class="btn-s" href={collectionPost.url}><IconCollections />{collection}</a></li>
                                )
                            }
                        })
                    )}
                </ul>
                <div class="meta">
                    <p class="category"><Fragment set:html={getCatIconAndLabel(frontmatter.category).icon} />{getCatIconAndLabel(frontmatter.category).label}</p>
                    <p class="date">Published {dateFormatter.format(Date.parse(frontmatter.date))}</p>
                </div>
                <button class="bookmark-toggle" data-title={frontmatter.title} data-url={frontmatter.url} data-project={frontmatter.project}><IconBookmarks /></button>
            </section>
            <section class="content" set:html={bodyHTMLSection}></section>
            {
                detailsHTMLSection && (
                    <section class="details" set:html={detailsHTMLSection}></section>
                )
            }
            {
                timelineEvents !== undefined && timelineEvents.length > 1 && (
                    <section class="timeline">
                        <h2>Timeline</h2>
                        <Timeline activeProject={activeProject} events={timelineEvents} postsWithLifespan={postsWithLifespan} />
                    </section>
                )
            }
            {
                editedPostHTML.relevance !== undefined && editedPostHTML.relevance.length > 0 && (
                    <section class="related">
                        <h2>Related Articles</h2>
                        <CardGroup posts={editedPostHTML.relevance} numToShow={3} />
                    </section>
                )
            }
            
        </article>
        
    </main>
</BaseLayout>