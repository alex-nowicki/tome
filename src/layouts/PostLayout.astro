---
import IconArrow from "../components/IconArrow.astro";
import BaseLayout from "./BaseLayout.astro";
import SidePanel from "../components/SidePanel.astro";

import { toTitleCase } from '../scripts/helpers.js';

import "../styles/post.css";

const { frontmatter } = Astro.props;

// Determine active project and post
const pagePath = frontmatter.url.split('/');
const activeProject = frontmatter.project;
const activePost = frontmatter.url;

// Get active post content
const postContent = await Astro.props.compiledContent();

// Get project posts
const posts = await Astro.glob('../pages/*/*/*.md');
const projectPosts = posts.filter(post => {
    return post.url.includes(`${activeProject.toLowerCase()}`) && !post.url.includes(`${activePost}`);
})

// Collect all search terms in an array
let searchArr = [];
let searchArrTerms = [];
for (const obj of projectPosts) {
    if (obj.frontmatter.searchTerms) {
        for (const term of obj.frontmatter.searchTerms) {
            searchArr.push({
                term: term,
                url: obj.url
            })
        }
    }
}

// Sort terms from longest to shortest
searchArr.sort((a, b) => b.term.length - a.term.length);
searchArr.map((obj) => searchArrTerms.push(obj.term));

/**
 * Search string for matching search terms
 * @param  {String} string a string to be searched
 * @param  {Array} terms an array of object search terms
 * @param  {Object} relevance (optional) an object of relevance score
 * @return {Object} an object including the edited string and updated relevance score object
 */
let detectMatches = function(string, terms, relevance){
    let editedString = string;
    let editedRelevance;
    if (relevance){
        editedRelevance = relevance;
    } else {
        editedRelevance = {}
    }
    
    for (const obj of terms){
        let term = obj.term;
        // Replace quote marks with regex that captures all types
        term = term.replaceAll("'", "['’]");
        term = term.replaceAll('"', '[“”"]');
        let pattern = `(?<!<a[^>]*)(?<!<[^>]*)(${term})(?![^<]*<\/a>)`;
        let flags = 'gi'; // g for global and i for case-insensitive
        let regex = new RegExp(pattern, flags);
        // Detect matches and add to relevance score
        let matches = editedString.match(regex);
        if (matches && matches.length > 0){
            if (editedRelevance[obj.url]){
                editedRelevance[obj.url] += matches.length;
            } else {
                editedRelevance[obj.url] = matches.length;
            }
        }
        // Wrap matches in links
        editedString = editedString.replaceAll(regex, `<a href="${obj.url}">$&</a>`);
    }

    return {
        string: editedString,
        relevance: editedRelevance 
    }
}

let editedPostContent = detectMatches(postContent, searchArr, null);

console.log(editedPostContent.relevance);

// Generate HTML for the InfoBox
let postInfoBox = '';
if (frontmatter.info){
    postInfoBox = Object.keys(frontmatter.info).map((key) => {
    let valueStr;
    let index = searchArrTerms.indexOf(frontmatter.info[key]);
    if (Array.isArray(frontmatter.info[key])){
        let valueList;
        valueList = frontmatter.info[key].map((value) => {
            return `<li>${value}</li>`;
        }).join('');
        valueStr = `<ul>${valueList}</ul>`;
    } else {
        valueStr = `<p>${frontmatter.info[key]}</p>`
    }
    return `<div><h2>${key}</h2>${valueStr}</div>`;
}).join('');
}

let editedPostInfoBox = detectMatches(postInfoBox, searchArr, editedPostContent.relevance);

console.log(editedPostInfoBox.relevance);

let relevanceArr = Object.keys(editedPostInfoBox.relevance).map((key) => {
    return {
        url: key,
        score: editedPostInfoBox.relevance[key]
    }
})

console.log(relevanceArr);

relevanceArr.sort((a, b) => b.score - a.score);


// TODO - Point category breadcrumb to filtered project page

---

<BaseLayout pageTitle={frontmatter.title}>
    <main class="post">
        <SidePanel activeProject={activeProject} activePost={frontmatter.url}/>
        <article>
            <div class="breadcrumbs">
                {pagePath.map((step, index) => {
                    if (index == 0){
                        return ''
                    } else if (index == 1){
                        return <a href={`../../${step}`}>{toTitleCase(step)}</a><IconArrow />
                    } else if (index == 2){
                        return <a href={`../../${pagePath[1]}#${step}`}>{toTitleCase(step)}</a><IconArrow />
                    } else {
                        return <a href={step}>{frontmatter.title}</a>
                    }
                })}
            </div>
            <h1>{frontmatter.title}</h1>
            <img src="" />
            <section class="infobox" set:html={editedPostInfoBox.string}></section>
            <section class="content">
                <div set:html={editedPostContent.string}></div>
                <!-- <slot /> -->
            </section>
            <section class="related"></section>
        </article>
    </main>
</BaseLayout>
